openapi: 3.1.0
info:
  title: Speed Reader API
  version: 0.1.0
servers:
  - url: http://localhost:3000/api
paths:
  /content:
    post:
      summary: Create reading content from user input
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateContentRequest"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReadingContent"
  /content/generate:
    post:
      summary: Generate content via Gemini AI
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GenerateContentRequest"
      responses:
        "200":
          description: Generated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReadingContent"
  /sessions:
    post:
      summary: Start a reading session
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateSessionRequest"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReadingSession"
  /sessions/complete:
    post:
      summary: Complete a session and compute metrics
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CompleteSessionRequest"
      responses:
        "200":
          description: Completed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReadingSession"
  /questions:
    post:
      summary: Generate quiz questions for a session/content
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GenerateQuestionsRequest"
      responses:
        "200":
          description: Questions generated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QuestionsResponse"
  /answers:
    post:
      summary: Submit answers and get score
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SubmitAnswersRequest"
      responses:
        "200":
          description: Scored result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ComprehensionResult"
  /analytics/summary:
    get:
      summary: Get analytics summary for current user/device
      responses:
        "200":
          description: Summary
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnalyticsSummary"
components:
  schemas:
    CreateContentRequest:
      type: object
      required: [language, source, text]
      properties:
        language:
          type: string
          enum: [en, vi]
        source:
          type: string
          enum: [paste, upload]
        text:
          type: string
    GenerateContentRequest:
      type: object
      required: [language, topic, targetWords]
      properties:
        language:
          type: string
          enum: [en, vi]
        topic:
          type: string
        targetWords:
          type: integer
          minimum: 100
          maximum: 2000
    ReadingContent:
      type: object
      properties:
        id: { type: string }
        language: { type: string, enum: [en, vi] }
        source: { type: string, enum: [paste, upload, ai] }
        title:
          anyOf:
            - { type: string }
            - { type: "null" }
        text: { type: string }
        wordCount: { type: integer }
    CreateSessionRequest:
      type: object
      required: [contentId, mode, paceWpm]
      properties:
        contentId: { type: string }
        mode: { type: string, enum: [word, chunk, paragraph] }
        paceWpm: { type: integer, minimum: 100, maximum: 1200 }
        chunkSize:
          anyOf:
            - { type: integer, minimum: 2, maximum: 8 }
            - { type: "null" }
    ReadingSession:
      type: object
      properties:
        id: { type: string }
        contentId: { type: string }
        mode: { type: string, enum: [word, chunk, paragraph] }
        paceWpm: { type: integer }
        chunkSize:
          anyOf:
            - { type: integer }
            - { type: "null" }
        startedAt: { type: string, format: date-time }
        endedAt:
          anyOf:
            - { type: string, format: date-time }
            - { type: "null" }
        durationMs: { type: integer }
        wordsRead: { type: integer }
        computedWpm: { type: integer }
    CompleteSessionRequest:
      type: object
      required: [sessionId, wordsRead, durationMs]
      properties:
        sessionId: { type: string }
        wordsRead: { type: integer }
        durationMs: { type: integer }
    GenerateQuestionsRequest:
      type: object
      required: [sessionId]
      properties:
        sessionId: { type: string }
        count: { type: integer, default: 5 }
    Question:
      type: object
      properties:
        index: { type: integer }
        prompt: { type: string }
        options:
          type: array
          items: { type: string }
          minItems: 4
          maxItems: 4
        correctIndex: { type: integer, minimum: 0, maximum: 3 }
    QuestionsResponse:
      type: object
      properties:
        sessionId: { type: string }
        questions:
          type: array
          items: { $ref: "#/components/schemas/Question" }
    SubmitAnswersRequest:
      type: object
      required: [sessionId, answers]
      properties:
        sessionId: { type: string }
        answers:
          type: array
          items: { type: integer, minimum: 0, maximum: 3 }
          minItems: 5
          maxItems: 5
    ComprehensionResult:
      type: object
      properties:
        id: { type: string }
        sessionId: { type: string }
        answers:
          type: array
          items: { type: integer }
        scorePercent: { type: integer }
        completedAt: { type: string, format: date-time }
    AnalyticsSummary:
      type: object
      properties:
        totalTimeMs: { type: integer }
        averageWpmByMode:
          type: object
          additionalProperties: { type: integer }
        averageScorePercent: { type: integer }
        sessionsCount: { type: integer }
